//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: ebpf/profiling/Continuous.proto

package v3

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	v3 "github.com/apache/skywalking-go/protocols/collect/common/v3"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContinuousProfilingTriggeredMonitorType int32

const (
	// Current process CPU usage percent(0-100).
	ContinuousProfilingTriggeredMonitorType_ProcessCPU ContinuousProfilingTriggeredMonitorType = 0
	// The number of threads in the process.
	ContinuousProfilingTriggeredMonitorType_ProcessThreadCount ContinuousProfilingTriggeredMonitorType = 1
	// System load value.
	ContinuousProfilingTriggeredMonitorType_SystemLoad ContinuousProfilingTriggeredMonitorType = 2
	// Process response error rate(0-100).
	// HTTP response codes in [500-600) are considered errors.
	// Formula: ErrorCount / TotalCount * 100
	ContinuousProfilingTriggeredMonitorType_HTTPErrorRate ContinuousProfilingTriggeredMonitorType = 3
	// Process response average time(ms).
	// Formula: TotalResponseTime(ms) / TotalCount
	ContinuousProfilingTriggeredMonitorType_HTTPAvgResponseTime ContinuousProfilingTriggeredMonitorType = 4
)

// Enum value maps for ContinuousProfilingTriggeredMonitorType.
var (
	ContinuousProfilingTriggeredMonitorType_name = map[int32]string{
		0: "ProcessCPU",
		1: "ProcessThreadCount",
		2: "SystemLoad",
		3: "HTTPErrorRate",
		4: "HTTPAvgResponseTime",
	}
	ContinuousProfilingTriggeredMonitorType_value = map[string]int32{
		"ProcessCPU":          0,
		"ProcessThreadCount":  1,
		"SystemLoad":          2,
		"HTTPErrorRate":       3,
		"HTTPAvgResponseTime": 4,
	}
)

func (x ContinuousProfilingTriggeredMonitorType) Enum() *ContinuousProfilingTriggeredMonitorType {
	p := new(ContinuousProfilingTriggeredMonitorType)
	*p = x
	return p
}

func (x ContinuousProfilingTriggeredMonitorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContinuousProfilingTriggeredMonitorType) Descriptor() protoreflect.EnumDescriptor {
	return file_ebpf_profiling_Continuous_proto_enumTypes[0].Descriptor()
}

func (ContinuousProfilingTriggeredMonitorType) Type() protoreflect.EnumType {
	return &file_ebpf_profiling_Continuous_proto_enumTypes[0]
}

func (x ContinuousProfilingTriggeredMonitorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContinuousProfilingTriggeredMonitorType.Descriptor instead.
func (ContinuousProfilingTriggeredMonitorType) EnumDescriptor() ([]byte, []int) {
	return file_ebpf_profiling_Continuous_proto_rawDescGZIP(), []int{0}
}

type ContinuousProfilingPolicyQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// current agent contains service and policies
	Policies []*ContinuousProfilingServicePolicyQuery `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *ContinuousProfilingPolicyQuery) Reset() {
	*x = ContinuousProfilingPolicyQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ebpf_profiling_Continuous_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinuousProfilingPolicyQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinuousProfilingPolicyQuery) ProtoMessage() {}

func (x *ContinuousProfilingPolicyQuery) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_profiling_Continuous_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinuousProfilingPolicyQuery.ProtoReflect.Descriptor instead.
func (*ContinuousProfilingPolicyQuery) Descriptor() ([]byte, []int) {
	return file_ebpf_profiling_Continuous_proto_rawDescGZIP(), []int{0}
}

func (x *ContinuousProfilingPolicyQuery) GetPolicies() []*ContinuousProfilingServicePolicyQuery {
	if x != nil {
		return x.Policies
	}
	return nil
}

type ContinuousProfilingServicePolicyQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// service name of the each process
	ServiceName string `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	// UUID represents the version(hash/shasum) of the current policies for the service.
	// This is blank in the initialization stage and is set through the `ContinuousProfilingPolicyQuery` command response for the following rounds of queries.
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *ContinuousProfilingServicePolicyQuery) Reset() {
	*x = ContinuousProfilingServicePolicyQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ebpf_profiling_Continuous_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinuousProfilingServicePolicyQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinuousProfilingServicePolicyQuery) ProtoMessage() {}

func (x *ContinuousProfilingServicePolicyQuery) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_profiling_Continuous_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinuousProfilingServicePolicyQuery.ProtoReflect.Descriptor instead.
func (*ContinuousProfilingServicePolicyQuery) Descriptor() ([]byte, []int) {
	return file_ebpf_profiling_Continuous_proto_rawDescGZIP(), []int{1}
}

func (x *ContinuousProfilingServicePolicyQuery) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ContinuousProfilingServicePolicyQuery) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type ContinuousProfilingReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// over threshold process entity
	Layer        string `protobuf:"bytes,1,opt,name=layer,proto3" json:"layer,omitempty"`
	ServiceName  string `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	InstanceName string `protobuf:"bytes,3,opt,name=instanceName,proto3" json:"instanceName,omitempty"`
	ProcessName  string `protobuf:"bytes,4,opt,name=processName,proto3" json:"processName,omitempty"`
	// reached thresholds causes
	Causes []*ContinuousProfilingCause `protobuf:"bytes,5,rep,name=causes,proto3" json:"causes,omitempty"`
	// The execution duration for this triggered profiling.
	// This is set at the agent side.
	Duration int32 `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`
	// target profiling task
	//
	// Types that are assignable to TargetTask:
	//
	//	*ContinuousProfilingReport_OnCPU
	//	*ContinuousProfilingReport_OffCPU
	//	*ContinuousProfilingReport_Network
	TargetTask isContinuousProfilingReport_TargetTask `protobuf_oneof:"targetTask"`
}

func (x *ContinuousProfilingReport) Reset() {
	*x = ContinuousProfilingReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ebpf_profiling_Continuous_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinuousProfilingReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinuousProfilingReport) ProtoMessage() {}

func (x *ContinuousProfilingReport) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_profiling_Continuous_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinuousProfilingReport.ProtoReflect.Descriptor instead.
func (*ContinuousProfilingReport) Descriptor() ([]byte, []int) {
	return file_ebpf_profiling_Continuous_proto_rawDescGZIP(), []int{2}
}

func (x *ContinuousProfilingReport) GetLayer() string {
	if x != nil {
		return x.Layer
	}
	return ""
}

func (x *ContinuousProfilingReport) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ContinuousProfilingReport) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *ContinuousProfilingReport) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *ContinuousProfilingReport) GetCauses() []*ContinuousProfilingCause {
	if x != nil {
		return x.Causes
	}
	return nil
}

func (x *ContinuousProfilingReport) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (m *ContinuousProfilingReport) GetTargetTask() isContinuousProfilingReport_TargetTask {
	if m != nil {
		return m.TargetTask
	}
	return nil
}

func (x *ContinuousProfilingReport) GetOnCPU() *ContinuousOnCPUProfilingTask {
	if x, ok := x.GetTargetTask().(*ContinuousProfilingReport_OnCPU); ok {
		return x.OnCPU
	}
	return nil
}

func (x *ContinuousProfilingReport) GetOffCPU() *ContinuousOffCPUProfilingTask {
	if x, ok := x.GetTargetTask().(*ContinuousProfilingReport_OffCPU); ok {
		return x.OffCPU
	}
	return nil
}

func (x *ContinuousProfilingReport) GetNetwork() *ContinuousNetworkProfilingTask {
	if x, ok := x.GetTargetTask().(*ContinuousProfilingReport_Network); ok {
		return x.Network
	}
	return nil
}

type isContinuousProfilingReport_TargetTask interface {
	isContinuousProfilingReport_TargetTask()
}

type ContinuousProfilingReport_OnCPU struct {
	OnCPU *ContinuousOnCPUProfilingTask `protobuf:"bytes,7,opt,name=onCPU,proto3,oneof"`
}

type ContinuousProfilingReport_OffCPU struct {
	OffCPU *ContinuousOffCPUProfilingTask `protobuf:"bytes,8,opt,name=offCPU,proto3,oneof"`
}

type ContinuousProfilingReport_Network struct {
	Network *ContinuousNetworkProfilingTask `protobuf:"bytes,9,opt,name=network,proto3,oneof"`
}

func (*ContinuousProfilingReport_OnCPU) isContinuousProfilingReport_TargetTask() {}

func (*ContinuousProfilingReport_OffCPU) isContinuousProfilingReport_TargetTask() {}

func (*ContinuousProfilingReport_Network) isContinuousProfilingReport_TargetTask() {}

type ContinuousProfilingCause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ContinuousProfilingTriggeredMonitorType `protobuf:"varint,1,opt,name=type,proto3,enum=skywalking.v3.ContinuousProfilingTriggeredMonitorType" json:"type,omitempty"`
	// Types that are assignable to Cause:
	//
	//	*ContinuousProfilingCause_SingleValue
	//	*ContinuousProfilingCause_Uri
	Cause isContinuousProfilingCause_Cause `protobuf_oneof:"cause"`
}

func (x *ContinuousProfilingCause) Reset() {
	*x = ContinuousProfilingCause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ebpf_profiling_Continuous_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinuousProfilingCause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinuousProfilingCause) ProtoMessage() {}

func (x *ContinuousProfilingCause) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_profiling_Continuous_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinuousProfilingCause.ProtoReflect.Descriptor instead.
func (*ContinuousProfilingCause) Descriptor() ([]byte, []int) {
	return file_ebpf_profiling_Continuous_proto_rawDescGZIP(), []int{3}
}

func (x *ContinuousProfilingCause) GetType() ContinuousProfilingTriggeredMonitorType {
	if x != nil {
		return x.Type
	}
	return ContinuousProfilingTriggeredMonitorType_ProcessCPU
}

func (m *ContinuousProfilingCause) GetCause() isContinuousProfilingCause_Cause {
	if m != nil {
		return m.Cause
	}
	return nil
}

func (x *ContinuousProfilingCause) GetSingleValue() *ContinuousProfilingSingleValueCause {
	if x, ok := x.GetCause().(*ContinuousProfilingCause_SingleValue); ok {
		return x.SingleValue
	}
	return nil
}

func (x *ContinuousProfilingCause) GetUri() *ContinuousProfilingURICause {
	if x, ok := x.GetCause().(*ContinuousProfilingCause_Uri); ok {
		return x.Uri
	}
	return nil
}

type isContinuousProfilingCause_Cause interface {
	isContinuousProfilingCause_Cause()
}

type ContinuousProfilingCause_SingleValue struct {
	SingleValue *ContinuousProfilingSingleValueCause `protobuf:"bytes,2,opt,name=singleValue,proto3,oneof"`
}

type ContinuousProfilingCause_Uri struct {
	Uri *ContinuousProfilingURICause `protobuf:"bytes,3,opt,name=uri,proto3,oneof"`
}

func (*ContinuousProfilingCause_SingleValue) isContinuousProfilingCause_Cause() {}

func (*ContinuousProfilingCause_Uri) isContinuousProfilingCause_Cause() {}

type ContinuousProfilingSingleValueCause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold float64 `protobuf:"fixed64,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Current   float64 `protobuf:"fixed64,2,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *ContinuousProfilingSingleValueCause) Reset() {
	*x = ContinuousProfilingSingleValueCause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ebpf_profiling_Continuous_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinuousProfilingSingleValueCause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinuousProfilingSingleValueCause) ProtoMessage() {}

func (x *ContinuousProfilingSingleValueCause) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_profiling_Continuous_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinuousProfilingSingleValueCause.ProtoReflect.Descriptor instead.
func (*ContinuousProfilingSingleValueCause) Descriptor() ([]byte, []int) {
	return file_ebpf_profiling_Continuous_proto_rawDescGZIP(), []int{4}
}

func (x *ContinuousProfilingSingleValueCause) GetThreshold() float64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *ContinuousProfilingSingleValueCause) GetCurrent() float64 {
	if x != nil {
		return x.Current
	}
	return 0
}

type ContinuousProfilingURICause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Uri:
	//
	//	*ContinuousProfilingURICause_Regex
	//	*ContinuousProfilingURICause_Path
	Uri       isContinuousProfilingURICause_Uri `protobuf_oneof:"uri"`
	Threshold float64                           `protobuf:"fixed64,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Current   float64                           `protobuf:"fixed64,4,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *ContinuousProfilingURICause) Reset() {
	*x = ContinuousProfilingURICause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ebpf_profiling_Continuous_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinuousProfilingURICause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinuousProfilingURICause) ProtoMessage() {}

func (x *ContinuousProfilingURICause) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_profiling_Continuous_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinuousProfilingURICause.ProtoReflect.Descriptor instead.
func (*ContinuousProfilingURICause) Descriptor() ([]byte, []int) {
	return file_ebpf_profiling_Continuous_proto_rawDescGZIP(), []int{5}
}

func (m *ContinuousProfilingURICause) GetUri() isContinuousProfilingURICause_Uri {
	if m != nil {
		return m.Uri
	}
	return nil
}

func (x *ContinuousProfilingURICause) GetRegex() string {
	if x, ok := x.GetUri().(*ContinuousProfilingURICause_Regex); ok {
		return x.Regex
	}
	return ""
}

func (x *ContinuousProfilingURICause) GetPath() string {
	if x, ok := x.GetUri().(*ContinuousProfilingURICause_Path); ok {
		return x.Path
	}
	return ""
}

func (x *ContinuousProfilingURICause) GetThreshold() float64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *ContinuousProfilingURICause) GetCurrent() float64 {
	if x != nil {
		return x.Current
	}
	return 0
}

type isContinuousProfilingURICause_Uri interface {
	isContinuousProfilingURICause_Uri()
}

type ContinuousProfilingURICause_Regex struct {
	Regex string `protobuf:"bytes,1,opt,name=regex,proto3,oneof"`
}

type ContinuousProfilingURICause_Path struct {
	Path string `protobuf:"bytes,2,opt,name=path,proto3,oneof"`
}

func (*ContinuousProfilingURICause_Regex) isContinuousProfilingURICause_Uri() {}

func (*ContinuousProfilingURICause_Path) isContinuousProfilingURICause_Uri() {}

// eBPF on CPU profiling task
type ContinuousOnCPUProfilingTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ContinuousOnCPUProfilingTask) Reset() {
	*x = ContinuousOnCPUProfilingTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ebpf_profiling_Continuous_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinuousOnCPUProfilingTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinuousOnCPUProfilingTask) ProtoMessage() {}

func (x *ContinuousOnCPUProfilingTask) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_profiling_Continuous_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinuousOnCPUProfilingTask.ProtoReflect.Descriptor instead.
func (*ContinuousOnCPUProfilingTask) Descriptor() ([]byte, []int) {
	return file_ebpf_profiling_Continuous_proto_rawDescGZIP(), []int{6}
}

// eBPF off CPU profiling task
type ContinuousOffCPUProfilingTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ContinuousOffCPUProfilingTask) Reset() {
	*x = ContinuousOffCPUProfilingTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ebpf_profiling_Continuous_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinuousOffCPUProfilingTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinuousOffCPUProfilingTask) ProtoMessage() {}

func (x *ContinuousOffCPUProfilingTask) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_profiling_Continuous_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinuousOffCPUProfilingTask.ProtoReflect.Descriptor instead.
func (*ContinuousOffCPUProfilingTask) Descriptor() ([]byte, []int) {
	return file_ebpf_profiling_Continuous_proto_rawDescGZIP(), []int{7}
}

// eBPF Network profiling task
type ContinuousNetworkProfilingTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SamplingURIRegexes []string `protobuf:"bytes,1,rep,name=samplingURIRegexes,proto3" json:"samplingURIRegexes,omitempty"`
}

func (x *ContinuousNetworkProfilingTask) Reset() {
	*x = ContinuousNetworkProfilingTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ebpf_profiling_Continuous_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinuousNetworkProfilingTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinuousNetworkProfilingTask) ProtoMessage() {}

func (x *ContinuousNetworkProfilingTask) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_profiling_Continuous_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinuousNetworkProfilingTask.ProtoReflect.Descriptor instead.
func (*ContinuousNetworkProfilingTask) Descriptor() ([]byte, []int) {
	return file_ebpf_profiling_Continuous_proto_rawDescGZIP(), []int{8}
}

func (x *ContinuousNetworkProfilingTask) GetSamplingURIRegexes() []string {
	if x != nil {
		return x.SamplingURIRegexes
	}
	return nil
}

var File_ebpf_profiling_Continuous_proto protoreflect.FileDescriptor

var file_ebpf_profiling_Continuous_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x65, 0x62, 0x70, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x2f, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0d, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33,
	0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x72, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x6f, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x50, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x6b, 0x79,
	0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x6f, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x5d, 0x0a, 0x25, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0xdc, 0x03, 0x0a, 0x19, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x63, 0x61, 0x75, 0x73, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x75, 0x73, 0x65, 0x52, 0x06,
	0x63, 0x61, 0x75, 0x73, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x05, 0x6f, 0x6e, 0x43, 0x50, 0x55, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x33, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x4f, 0x6e, 0x43, 0x50,
	0x55, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00,
	0x52, 0x05, 0x6f, 0x6e, 0x43, 0x50, 0x55, 0x12, 0x46, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x43, 0x50,
	0x55, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f,
	0x75, 0x73, 0x4f, 0x66, 0x66, 0x43, 0x50, 0x55, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x43, 0x50, 0x55, 0x12,
	0x49, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x48,
	0x00, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x0c, 0x0a, 0x0a, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x87, 0x02, 0x0a, 0x18, 0x43, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x56, 0x0a, 0x0b, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75,
	0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x03, 0x75, 0x72, 0x69,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75,
	0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x52, 0x49, 0x43, 0x61, 0x75,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x42, 0x07, 0x0a, 0x05, 0x63, 0x61, 0x75,
	0x73, 0x65, 0x22, 0x5d, 0x0a, 0x23, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x22, 0x8a, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x52, 0x49, 0x43, 0x61, 0x75, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x22, 0x1e,
	0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x4f, 0x6e, 0x43, 0x50,
	0x55, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x1f,
	0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x4f, 0x66, 0x66, 0x43,
	0x50, 0x55, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x22,
	0x50, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x52, 0x49,
	0x52, 0x65, 0x67, 0x65, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x52, 0x49, 0x52, 0x65, 0x67, 0x65, 0x78, 0x65,
	0x73, 0x2a, 0x8d, 0x01, 0x0a, 0x27, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x0a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x50, 0x55, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c,
	0x6f, 0x61, 0x64, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x54, 0x54, 0x50, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x54, 0x54, 0x50,
	0x41, 0x76, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x10,
	0x04, 0x32, 0xd3, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x59, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x2d, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x33, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x1a, 0x17, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x13, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x28, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x17, 0x2e, 0x73,
	0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x00, 0x42, 0x73, 0x0a, 0x33, 0x6f, 0x72, 0x67, 0x2e, 0x61,
	0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x62, 0x70,
	0x66, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x50, 0x01,
	0x5a, 0x3a, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x67, 0x6f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x62, 0x70, 0x66, 0x2f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x33, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ebpf_profiling_Continuous_proto_rawDescOnce sync.Once
	file_ebpf_profiling_Continuous_proto_rawDescData = file_ebpf_profiling_Continuous_proto_rawDesc
)

func file_ebpf_profiling_Continuous_proto_rawDescGZIP() []byte {
	file_ebpf_profiling_Continuous_proto_rawDescOnce.Do(func() {
		file_ebpf_profiling_Continuous_proto_rawDescData = protoimpl.X.CompressGZIP(file_ebpf_profiling_Continuous_proto_rawDescData)
	})
	return file_ebpf_profiling_Continuous_proto_rawDescData
}

var file_ebpf_profiling_Continuous_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ebpf_profiling_Continuous_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_ebpf_profiling_Continuous_proto_goTypes = []interface{}{
	(ContinuousProfilingTriggeredMonitorType)(0),  // 0: skywalking.v3.ContinuousProfilingTriggeredMonitorType
	(*ContinuousProfilingPolicyQuery)(nil),        // 1: skywalking.v3.ContinuousProfilingPolicyQuery
	(*ContinuousProfilingServicePolicyQuery)(nil), // 2: skywalking.v3.ContinuousProfilingServicePolicyQuery
	(*ContinuousProfilingReport)(nil),             // 3: skywalking.v3.ContinuousProfilingReport
	(*ContinuousProfilingCause)(nil),              // 4: skywalking.v3.ContinuousProfilingCause
	(*ContinuousProfilingSingleValueCause)(nil),   // 5: skywalking.v3.ContinuousProfilingSingleValueCause
	(*ContinuousProfilingURICause)(nil),           // 6: skywalking.v3.ContinuousProfilingURICause
	(*ContinuousOnCPUProfilingTask)(nil),          // 7: skywalking.v3.ContinuousOnCPUProfilingTask
	(*ContinuousOffCPUProfilingTask)(nil),         // 8: skywalking.v3.ContinuousOffCPUProfilingTask
	(*ContinuousNetworkProfilingTask)(nil),        // 9: skywalking.v3.ContinuousNetworkProfilingTask
	(*v3.Commands)(nil),                           // 10: skywalking.v3.Commands
}
var file_ebpf_profiling_Continuous_proto_depIdxs = []int32{
	2,  // 0: skywalking.v3.ContinuousProfilingPolicyQuery.policies:type_name -> skywalking.v3.ContinuousProfilingServicePolicyQuery
	4,  // 1: skywalking.v3.ContinuousProfilingReport.causes:type_name -> skywalking.v3.ContinuousProfilingCause
	7,  // 2: skywalking.v3.ContinuousProfilingReport.onCPU:type_name -> skywalking.v3.ContinuousOnCPUProfilingTask
	8,  // 3: skywalking.v3.ContinuousProfilingReport.offCPU:type_name -> skywalking.v3.ContinuousOffCPUProfilingTask
	9,  // 4: skywalking.v3.ContinuousProfilingReport.network:type_name -> skywalking.v3.ContinuousNetworkProfilingTask
	0,  // 5: skywalking.v3.ContinuousProfilingCause.type:type_name -> skywalking.v3.ContinuousProfilingTriggeredMonitorType
	5,  // 6: skywalking.v3.ContinuousProfilingCause.singleValue:type_name -> skywalking.v3.ContinuousProfilingSingleValueCause
	6,  // 7: skywalking.v3.ContinuousProfilingCause.uri:type_name -> skywalking.v3.ContinuousProfilingURICause
	1,  // 8: skywalking.v3.ContinuousProfilingService.queryPolicies:input_type -> skywalking.v3.ContinuousProfilingPolicyQuery
	3,  // 9: skywalking.v3.ContinuousProfilingService.reportProfilingTask:input_type -> skywalking.v3.ContinuousProfilingReport
	10, // 10: skywalking.v3.ContinuousProfilingService.queryPolicies:output_type -> skywalking.v3.Commands
	10, // 11: skywalking.v3.ContinuousProfilingService.reportProfilingTask:output_type -> skywalking.v3.Commands
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_ebpf_profiling_Continuous_proto_init() }
func file_ebpf_profiling_Continuous_proto_init() {
	if File_ebpf_profiling_Continuous_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ebpf_profiling_Continuous_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinuousProfilingPolicyQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ebpf_profiling_Continuous_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinuousProfilingServicePolicyQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ebpf_profiling_Continuous_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinuousProfilingReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ebpf_profiling_Continuous_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinuousProfilingCause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ebpf_profiling_Continuous_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinuousProfilingSingleValueCause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ebpf_profiling_Continuous_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinuousProfilingURICause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ebpf_profiling_Continuous_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinuousOnCPUProfilingTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ebpf_profiling_Continuous_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinuousOffCPUProfilingTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ebpf_profiling_Continuous_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinuousNetworkProfilingTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ebpf_profiling_Continuous_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ContinuousProfilingReport_OnCPU)(nil),
		(*ContinuousProfilingReport_OffCPU)(nil),
		(*ContinuousProfilingReport_Network)(nil),
	}
	file_ebpf_profiling_Continuous_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ContinuousProfilingCause_SingleValue)(nil),
		(*ContinuousProfilingCause_Uri)(nil),
	}
	file_ebpf_profiling_Continuous_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ContinuousProfilingURICause_Regex)(nil),
		(*ContinuousProfilingURICause_Path)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ebpf_profiling_Continuous_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ebpf_profiling_Continuous_proto_goTypes,
		DependencyIndexes: file_ebpf_profiling_Continuous_proto_depIdxs,
		EnumInfos:         file_ebpf_profiling_Continuous_proto_enumTypes,
		MessageInfos:      file_ebpf_profiling_Continuous_proto_msgTypes,
	}.Build()
	File_ebpf_profiling_Continuous_proto = out.File
	file_ebpf_profiling_Continuous_proto_rawDesc = nil
	file_ebpf_profiling_Continuous_proto_goTypes = nil
	file_ebpf_profiling_Continuous_proto_depIdxs = nil
}
