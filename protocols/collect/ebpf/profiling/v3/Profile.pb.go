//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: ebpf/profiling/Profile.proto

package v3

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	v3 "github.com/apache/skywalking-go/protocols/collect/common/v3"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EBPFProfilingStackType int32

const (
	EBPFProfilingStackType_PROCESS_KERNEL_SPACE EBPFProfilingStackType = 0
	EBPFProfilingStackType_PROCESS_USER_SPACE   EBPFProfilingStackType = 1
)

// Enum value maps for EBPFProfilingStackType.
var (
	EBPFProfilingStackType_name = map[int32]string{
		0: "PROCESS_KERNEL_SPACE",
		1: "PROCESS_USER_SPACE",
	}
	EBPFProfilingStackType_value = map[string]int32{
		"PROCESS_KERNEL_SPACE": 0,
		"PROCESS_USER_SPACE":   1,
	}
)

func (x EBPFProfilingStackType) Enum() *EBPFProfilingStackType {
	p := new(EBPFProfilingStackType)
	*p = x
	return p
}

func (x EBPFProfilingStackType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBPFProfilingStackType) Descriptor() protoreflect.EnumDescriptor {
	return file_ebpf_profiling_Profile_proto_enumTypes[0].Descriptor()
}

func (EBPFProfilingStackType) Type() protoreflect.EnumType {
	return &file_ebpf_profiling_Profile_proto_enumTypes[0]
}

func (x EBPFProfilingStackType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EBPFProfilingStackType.Descriptor instead.
func (EBPFProfilingStackType) EnumDescriptor() ([]byte, []int) {
	return file_ebpf_profiling_Profile_proto_rawDescGZIP(), []int{0}
}

type EBPFProfilingTaskQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// rover instance id
	RoverInstanceId string `protobuf:"bytes,1,opt,name=roverInstanceId,proto3" json:"roverInstanceId,omitempty"`
	// latest task update time
	LatestUpdateTime int64 `protobuf:"varint,2,opt,name=latestUpdateTime,proto3" json:"latestUpdateTime,omitempty"`
}

func (x *EBPFProfilingTaskQuery) Reset() {
	*x = EBPFProfilingTaskQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ebpf_profiling_Profile_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EBPFProfilingTaskQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EBPFProfilingTaskQuery) ProtoMessage() {}

func (x *EBPFProfilingTaskQuery) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_profiling_Profile_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EBPFProfilingTaskQuery.ProtoReflect.Descriptor instead.
func (*EBPFProfilingTaskQuery) Descriptor() ([]byte, []int) {
	return file_ebpf_profiling_Profile_proto_rawDescGZIP(), []int{0}
}

func (x *EBPFProfilingTaskQuery) GetRoverInstanceId() string {
	if x != nil {
		return x.RoverInstanceId
	}
	return ""
}

func (x *EBPFProfilingTaskQuery) GetLatestUpdateTime() int64 {
	if x != nil {
		return x.LatestUpdateTime
	}
	return 0
}

type EBPFProfilingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// task metadata
	Task *EBPFProfilingTaskMetadata `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	// profiling data
	//
	// Types that are assignable to Profiling:
	//
	//	*EBPFProfilingData_OnCPU
	//	*EBPFProfilingData_OffCPU
	Profiling isEBPFProfilingData_Profiling `protobuf_oneof:"profiling"`
}

func (x *EBPFProfilingData) Reset() {
	*x = EBPFProfilingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ebpf_profiling_Profile_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EBPFProfilingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EBPFProfilingData) ProtoMessage() {}

func (x *EBPFProfilingData) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_profiling_Profile_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EBPFProfilingData.ProtoReflect.Descriptor instead.
func (*EBPFProfilingData) Descriptor() ([]byte, []int) {
	return file_ebpf_profiling_Profile_proto_rawDescGZIP(), []int{1}
}

func (x *EBPFProfilingData) GetTask() *EBPFProfilingTaskMetadata {
	if x != nil {
		return x.Task
	}
	return nil
}

func (m *EBPFProfilingData) GetProfiling() isEBPFProfilingData_Profiling {
	if m != nil {
		return m.Profiling
	}
	return nil
}

func (x *EBPFProfilingData) GetOnCPU() *EBPFOnCPUProfiling {
	if x, ok := x.GetProfiling().(*EBPFProfilingData_OnCPU); ok {
		return x.OnCPU
	}
	return nil
}

func (x *EBPFProfilingData) GetOffCPU() *EBPFOffCPUProfiling {
	if x, ok := x.GetProfiling().(*EBPFProfilingData_OffCPU); ok {
		return x.OffCPU
	}
	return nil
}

type isEBPFProfilingData_Profiling interface {
	isEBPFProfilingData_Profiling()
}

type EBPFProfilingData_OnCPU struct {
	OnCPU *EBPFOnCPUProfiling `protobuf:"bytes,2,opt,name=onCPU,proto3,oneof"`
}

type EBPFProfilingData_OffCPU struct {
	OffCPU *EBPFOffCPUProfiling `protobuf:"bytes,3,opt,name=offCPU,proto3,oneof"`
}

func (*EBPFProfilingData_OnCPU) isEBPFProfilingData_Profiling() {}

func (*EBPFProfilingData_OffCPU) isEBPFProfilingData_Profiling() {}

type EBPFProfilingTaskMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// profiling task id
	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	// profiling process id
	ProcessId string `protobuf:"bytes,2,opt,name=processId,proto3" json:"processId,omitempty"`
	// the start time of this profiling process
	ProfilingStartTime int64 `protobuf:"varint,3,opt,name=profilingStartTime,proto3" json:"profilingStartTime,omitempty"`
	// report time
	CurrentTime int64 `protobuf:"varint,4,opt,name=currentTime,proto3" json:"currentTime,omitempty"`
}

func (x *EBPFProfilingTaskMetadata) Reset() {
	*x = EBPFProfilingTaskMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ebpf_profiling_Profile_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EBPFProfilingTaskMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EBPFProfilingTaskMetadata) ProtoMessage() {}

func (x *EBPFProfilingTaskMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_profiling_Profile_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EBPFProfilingTaskMetadata.ProtoReflect.Descriptor instead.
func (*EBPFProfilingTaskMetadata) Descriptor() ([]byte, []int) {
	return file_ebpf_profiling_Profile_proto_rawDescGZIP(), []int{2}
}

func (x *EBPFProfilingTaskMetadata) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *EBPFProfilingTaskMetadata) GetProcessId() string {
	if x != nil {
		return x.ProcessId
	}
	return ""
}

func (x *EBPFProfilingTaskMetadata) GetProfilingStartTime() int64 {
	if x != nil {
		return x.ProfilingStartTime
	}
	return 0
}

func (x *EBPFProfilingTaskMetadata) GetCurrentTime() int64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

type EBPFProfilingStackMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// stack type
	StackType EBPFProfilingStackType `protobuf:"varint,1,opt,name=stackType,proto3,enum=skywalking.v3.EBPFProfilingStackType" json:"stackType,omitempty"`
	// stack id from kernel provide
	StackId int32 `protobuf:"varint,2,opt,name=stackId,proto3" json:"stackId,omitempty"`
	// stack symbols
	StackSymbols []string `protobuf:"bytes,3,rep,name=stackSymbols,proto3" json:"stackSymbols,omitempty"`
}

func (x *EBPFProfilingStackMetadata) Reset() {
	*x = EBPFProfilingStackMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ebpf_profiling_Profile_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EBPFProfilingStackMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EBPFProfilingStackMetadata) ProtoMessage() {}

func (x *EBPFProfilingStackMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_profiling_Profile_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EBPFProfilingStackMetadata.ProtoReflect.Descriptor instead.
func (*EBPFProfilingStackMetadata) Descriptor() ([]byte, []int) {
	return file_ebpf_profiling_Profile_proto_rawDescGZIP(), []int{3}
}

func (x *EBPFProfilingStackMetadata) GetStackType() EBPFProfilingStackType {
	if x != nil {
		return x.StackType
	}
	return EBPFProfilingStackType_PROCESS_KERNEL_SPACE
}

func (x *EBPFProfilingStackMetadata) GetStackId() int32 {
	if x != nil {
		return x.StackId
	}
	return 0
}

func (x *EBPFProfilingStackMetadata) GetStackSymbols() []string {
	if x != nil {
		return x.StackSymbols
	}
	return nil
}

type EBPFOnCPUProfiling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// stack data in one task(thread)
	Stacks []*EBPFProfilingStackMetadata `protobuf:"bytes,1,rep,name=stacks,proto3" json:"stacks,omitempty"`
	// stack counts
	DumpCount int32 `protobuf:"varint,2,opt,name=dumpCount,proto3" json:"dumpCount,omitempty"`
}

func (x *EBPFOnCPUProfiling) Reset() {
	*x = EBPFOnCPUProfiling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ebpf_profiling_Profile_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EBPFOnCPUProfiling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EBPFOnCPUProfiling) ProtoMessage() {}

func (x *EBPFOnCPUProfiling) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_profiling_Profile_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EBPFOnCPUProfiling.ProtoReflect.Descriptor instead.
func (*EBPFOnCPUProfiling) Descriptor() ([]byte, []int) {
	return file_ebpf_profiling_Profile_proto_rawDescGZIP(), []int{4}
}

func (x *EBPFOnCPUProfiling) GetStacks() []*EBPFProfilingStackMetadata {
	if x != nil {
		return x.Stacks
	}
	return nil
}

func (x *EBPFOnCPUProfiling) GetDumpCount() int32 {
	if x != nil {
		return x.DumpCount
	}
	return 0
}

type EBPFOffCPUProfiling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// stack data in one task(thread)
	Stacks []*EBPFProfilingStackMetadata `protobuf:"bytes,1,rep,name=stacks,proto3" json:"stacks,omitempty"`
	// total count of the process is switched to off cpu by the scheduler.
	SwitchCount int32 `protobuf:"varint,2,opt,name=switchCount,proto3" json:"switchCount,omitempty"`
	// where time(nanoseconds) is spent waiting while blocked on I/O, locks, timers, paging/swapping, etc.
	Duration int64 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *EBPFOffCPUProfiling) Reset() {
	*x = EBPFOffCPUProfiling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ebpf_profiling_Profile_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EBPFOffCPUProfiling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EBPFOffCPUProfiling) ProtoMessage() {}

func (x *EBPFOffCPUProfiling) ProtoReflect() protoreflect.Message {
	mi := &file_ebpf_profiling_Profile_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EBPFOffCPUProfiling.ProtoReflect.Descriptor instead.
func (*EBPFOffCPUProfiling) Descriptor() ([]byte, []int) {
	return file_ebpf_profiling_Profile_proto_rawDescGZIP(), []int{5}
}

func (x *EBPFOffCPUProfiling) GetStacks() []*EBPFProfilingStackMetadata {
	if x != nil {
		return x.Stacks
	}
	return nil
}

func (x *EBPFOffCPUProfiling) GetSwitchCount() int32 {
	if x != nil {
		return x.SwitchCount
	}
	return 0
}

func (x *EBPFOffCPUProfiling) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

var File_ebpf_profiling_Profile_proto protoreflect.FileDescriptor

var file_ebpf_profiling_Profile_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x65, 0x62, 0x70, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x2f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x1a, 0x14, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x6e, 0x0a, 0x16, 0x45, 0x42, 0x50, 0x46, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x28, 0x0a,
	0x0f, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x11, 0x45, 0x42, 0x50, 0x46, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x61, 0x73,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x42, 0x50, 0x46, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x39, 0x0a, 0x05, 0x6f, 0x6e, 0x43, 0x50, 0x55,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x42, 0x50, 0x46, 0x4f, 0x6e, 0x43, 0x50, 0x55,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x6e, 0x43,
	0x50, 0x55, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x43, 0x50, 0x55, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x33, 0x2e, 0x45, 0x42, 0x50, 0x46, 0x4f, 0x66, 0x66, 0x43, 0x50, 0x55, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x43, 0x50, 0x55,
	0x42, 0x0b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0xa3, 0x01,
	0x0a, 0x19, 0x45, 0x42, 0x50, 0x46, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54,
	0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x1a, 0x45, 0x42, 0x50, 0x46, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x42, 0x50, 0x46, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x22, 0x75, 0x0a, 0x12, 0x45, 0x42, 0x50, 0x46, 0x4f, 0x6e, 0x43,
	0x50, 0x55, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6b,
	0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x42, 0x50, 0x46,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x06, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x75, 0x6d, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x64, 0x75, 0x6d, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x96, 0x01, 0x0a,
	0x13, 0x45, 0x42, 0x50, 0x46, 0x4f, 0x66, 0x66, 0x43, 0x50, 0x55, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x42, 0x50, 0x46, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x4a, 0x0a, 0x16, 0x45, 0x42, 0x50, 0x46, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4b, 0x45, 0x52, 0x4e, 0x45,
	0x4c, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10,
	0x01, 0x32, 0xbd, 0x01, 0x0a, 0x14, 0x45, 0x42, 0x50, 0x46, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x25, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61,
	0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x42, 0x50, 0x46, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x17, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x14, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x20, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x33, 0x2e, 0x45, 0x42, 0x50, 0x46, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x17, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x00, 0x28,
	0x01, 0x42, 0x73, 0x0a, 0x33, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x6d, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x65, 0x62, 0x70, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x50, 0x01, 0x5a, 0x3a, 0x73, 0x6b, 0x79, 0x77,
	0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x67, 0x6f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x2f, 0x65, 0x62, 0x70, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x2f, 0x76, 0x33, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ebpf_profiling_Profile_proto_rawDescOnce sync.Once
	file_ebpf_profiling_Profile_proto_rawDescData = file_ebpf_profiling_Profile_proto_rawDesc
)

func file_ebpf_profiling_Profile_proto_rawDescGZIP() []byte {
	file_ebpf_profiling_Profile_proto_rawDescOnce.Do(func() {
		file_ebpf_profiling_Profile_proto_rawDescData = protoimpl.X.CompressGZIP(file_ebpf_profiling_Profile_proto_rawDescData)
	})
	return file_ebpf_profiling_Profile_proto_rawDescData
}

var file_ebpf_profiling_Profile_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ebpf_profiling_Profile_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_ebpf_profiling_Profile_proto_goTypes = []interface{}{
	(EBPFProfilingStackType)(0),        // 0: skywalking.v3.EBPFProfilingStackType
	(*EBPFProfilingTaskQuery)(nil),     // 1: skywalking.v3.EBPFProfilingTaskQuery
	(*EBPFProfilingData)(nil),          // 2: skywalking.v3.EBPFProfilingData
	(*EBPFProfilingTaskMetadata)(nil),  // 3: skywalking.v3.EBPFProfilingTaskMetadata
	(*EBPFProfilingStackMetadata)(nil), // 4: skywalking.v3.EBPFProfilingStackMetadata
	(*EBPFOnCPUProfiling)(nil),         // 5: skywalking.v3.EBPFOnCPUProfiling
	(*EBPFOffCPUProfiling)(nil),        // 6: skywalking.v3.EBPFOffCPUProfiling
	(*v3.Commands)(nil),                // 7: skywalking.v3.Commands
}
var file_ebpf_profiling_Profile_proto_depIdxs = []int32{
	3, // 0: skywalking.v3.EBPFProfilingData.task:type_name -> skywalking.v3.EBPFProfilingTaskMetadata
	5, // 1: skywalking.v3.EBPFProfilingData.onCPU:type_name -> skywalking.v3.EBPFOnCPUProfiling
	6, // 2: skywalking.v3.EBPFProfilingData.offCPU:type_name -> skywalking.v3.EBPFOffCPUProfiling
	0, // 3: skywalking.v3.EBPFProfilingStackMetadata.stackType:type_name -> skywalking.v3.EBPFProfilingStackType
	4, // 4: skywalking.v3.EBPFOnCPUProfiling.stacks:type_name -> skywalking.v3.EBPFProfilingStackMetadata
	4, // 5: skywalking.v3.EBPFOffCPUProfiling.stacks:type_name -> skywalking.v3.EBPFProfilingStackMetadata
	1, // 6: skywalking.v3.EBPFProfilingService.queryTasks:input_type -> skywalking.v3.EBPFProfilingTaskQuery
	2, // 7: skywalking.v3.EBPFProfilingService.collectProfilingData:input_type -> skywalking.v3.EBPFProfilingData
	7, // 8: skywalking.v3.EBPFProfilingService.queryTasks:output_type -> skywalking.v3.Commands
	7, // 9: skywalking.v3.EBPFProfilingService.collectProfilingData:output_type -> skywalking.v3.Commands
	8, // [8:10] is the sub-list for method output_type
	6, // [6:8] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_ebpf_profiling_Profile_proto_init() }
func file_ebpf_profiling_Profile_proto_init() {
	if File_ebpf_profiling_Profile_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ebpf_profiling_Profile_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EBPFProfilingTaskQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ebpf_profiling_Profile_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EBPFProfilingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ebpf_profiling_Profile_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EBPFProfilingTaskMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ebpf_profiling_Profile_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EBPFProfilingStackMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ebpf_profiling_Profile_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EBPFOnCPUProfiling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ebpf_profiling_Profile_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EBPFOffCPUProfiling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ebpf_profiling_Profile_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*EBPFProfilingData_OnCPU)(nil),
		(*EBPFProfilingData_OffCPU)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ebpf_profiling_Profile_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ebpf_profiling_Profile_proto_goTypes,
		DependencyIndexes: file_ebpf_profiling_Profile_proto_depIdxs,
		EnumInfos:         file_ebpf_profiling_Profile_proto_enumTypes,
		MessageInfos:      file_ebpf_profiling_Profile_proto_msgTypes,
	}.Build()
	File_ebpf_profiling_Profile_proto = out.File
	file_ebpf_profiling_Profile_proto_rawDesc = nil
	file_ebpf_profiling_Profile_proto_goTypes = nil
	file_ebpf_profiling_Profile_proto_depIdxs = nil
}
